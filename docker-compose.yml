# Docker Compose configuration for No-Code Architecture stack
# Each service can be started independently using the --project-name flag

services:
  # baserow:
  #   container_name: "baserow"
  #   hostname: baserow
  #   image: baserow/baserow:1.32.1
  #   restart: unless-stopped
  #   environment:
  #     TZ: ${TZ}
  #     BASEROW_PUBLIC_URL: "http://localhost:8980"
  #     BASEROW_EXTRA_ALLOWED_HOSTS: "baserow,localhost"
  #   ports:
  #     - "8980:80"
  #   volumes:
  #     - baserow_data:/baserow/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test:
  #       ["CMD", "curl", "-f", "http://localhost/api/health-check/ || exit 0"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   deploy:
  #     resources:
  #       limits:
  #         memory: ${BASEROW_MEMORY_LIMIT:-1G}
  #   labels:
  #     com.docker.compose.service: "Baserow Database"
  #     com.docker.compose.description: "No-code database & Airtable alternative"

  workflows: # MODIFIED SECTION
    container_name: "workflows"
    hostname: workflows
    build:
      context: . # Path to the directory containing n8n.Dockerfile
      dockerfile: n8n.Dockerfile # Name of your Dockerfile
    restart: unless-stopped
    environment:
      LIBVA_DRIVER_NAME: iHD
      LIBVA_DRM: 1
      LIBVA_GLX: 1
      LIBVA_X11: 1
      LIBVA_VLD: 1
      LIBVA_TRACE: 1
      LIBVA_TRACE_FILE: /tmp/libva-trace.log
      TZ: ${TZ}
      N8N_HOST: "localhost"
      N8N_PORT: 5678
      WEBHOOK_URL: "http://localhost:5678/"
      GENERIC_TIMEZONE: ${TZ}
      DB_TYPE: sqlite
      PYTHONUNBUFFERED: 1 # Useful for seeing Python print statements immediately in logs
      N8N_BINARY_DATA_MODE: "filesystem" # Store binary files on disk instead of database
      N8N_RUNNERS_ENABLED: "true" # Enable task runners as recommended
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ${N8N_FILES_PATH:-./n8n-files}:/files # This is crucial for script I/O
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/health || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: ${N8N_MEMORY_LIMIT:-2G} # Increased memory for video processing
    labels:
      com.docker.compose.service: "n8n Workflows"
      com.docker.compose.description: "Workflow automation tool"

  minio:
    container_name: "minio"
    hostname: minio
    image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-password123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network
    command: server /data --console-address ":9001"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/ready || exit 0",
        ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: ${MINIO_MEMORY_LIMIT:-512M}
    labels:
      com.docker.compose.service: "MinIO S3"
      com.docker.compose.description: "S3-compatible object storage"

  ncatoolkit:
    container_name: "ncatoolkit"
    hostname: ncatoolkit
    image: stephengpope/no-code-architects-toolkit:latest
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      API_KEY: ${NCA_API_KEY:-the-api-key}
      S3_ENDPOINT_URL: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-admin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-password123}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-nca-toolkit}
      S3_REGION: ${S3_REGION:-us-east-1}
    ports:
      - "8080:8080"
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: ${NCA_MEMORY_LIMIT:-2G}
    labels:
      com.docker.compose.service: "NCA Toolkit"
      com.docker.compose.description: "No-Code Architects Toolkit"

  kokorotts:
    container_name: "kokoro-tts-cpu"
    hostname: kokorotts
    image: ghcr.io/remsky/kokoro-fastapi-cpu:v0.2.2
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - "8880:8880"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8880/ || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: ${KOKORO_MEMORY_LIMIT:-2G}
    labels:
      com.docker.compose.service: "Kokoro TTS"
      com.docker.compose.description: "Text-to-Speech service"

networks:
  app-network:
    driver: bridge
    name: app-network
    external: true
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  # baserow_data:
  #   name: baserow_data
  #   external: true
  n8n_data:
    name: n8n_data
    external: true
  minio_data:
    name: minio_data
    external: true
